<?php

/**
 * @file
 * Collect email addresses from a form within an entity or pane
 */

/**
 * Implements hook_menu()
 */
function mailfish_menu() {
  $items['admin/config/content/mailfish'] = array(
    'title' => 'MailFish Settings',
    'description' => 'Administer MailFish Settings',
    'page callback' => 'drupal_get_form', # A Drupal API function
    'page arguments' => array('mailfish_admin_settings_form'), #This fucntion will be implemented in mailfish.admin.inc. And will be a parameter for drupal_get_form
    'access arguments' => array('manage mailfish settings'),
    'file' => 'mailfish.admin.inc'
  );

  $items['admin/config/content/mailfish/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK, # This sets the menu item to the default setting, usually 'active'
    'weight' => -10,
 );
 return $items;
}

/**
 * Provde the form to subscribe to MailFish.
 */
function mailfish_email_form($form, &$form_state) {
  $mailfish = new stdClass();
  $form['#mailfish'] = $mailfish; #By using the '#' you can add things to the form array which won't be treated as form elements but are passed                                                                through validation and submission
  field_attach_form('mailfish', $mailfish, $form, &$form_state);
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Sign Up'),
    '#weight' => 40,
  );
  return $form;
}

/**
 * Implements hook_permission()
 */
function mailfish_permission() {
  $perm = array(
    'view mailfish subscriptions' => array(
      'title' => t('View MailFish subscriptions'),
    ),
    'create mailfish subscriptions' => array(
      'title' => t('Create MailFish subscriptions'),
    ),
    'manage mailfish settings' => array(
      'title' => t('Manage MailFish settings'),
    ),
  );
  return $perm;
}

/**
 * Implements hook_form_alter()
 *
 * Shows the form_id of each form using devel.
 */
function mailfish_form_alter(&$form, $form_state, $form_id) {
   if (module_exists('devel')) {
     dpm($form_id);
   }
   else {
     print $form_id;
   }
}

/**
 * Implements hook_form_system_site_information_settings_alter()
 *
 * Adds a copy of the MailFish settings form to the Site Information form.
 * For demo purposes.
 */
function mailfish_form_system_site_information_settings_alter(&$form, $form_state) {
  $form['mailfish_message'] = array(
    '#type' => 'textfield',
    '#title' => t('Message to display after a user signs up.'),
    '#default_value' => variable_get('mailfish_message', t('Thank you for signing up to the mailing list.')),
  );
}

/**
 * Implments hook_entity_info().
 */
function mailfish_entity_info() {
  $return = array(
    'mailfish' => array(
      'label' => t('Mailfish Subscriptions'),
      'base table' => 'mailfish',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'id',
      ),
      'bundles' => array(
        'mailfish' => array(
          'label' => t('Mailfish'),
          'admin' => array(
            'path' => 'admin/config/content/mailfish',
            'access arguments' => array('manage mailfish settings'),
          ),
        ),
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full Mailfish subscription'),
          'custom settings' => FALSE,
        ),
      ),
    ),
  );
  return $return;
}

/**
 * Submission handler for mailfish_email_form.
 */
function mailfish_email_form_submit($form, &$form_state) {
  $mailfish = $form['#mailfish'];
  entity_form_submit_build_entity('mailfish', $mailfish, $form, $form_state);

  //Save signup data.
  mailfish_save($mailfish);

  //Provide the user with a translated confirmation message.
  $message = variable_get('mailfish_message', t('Thank you for signing up to the mailing list.'));
  drupal_set_message($message);
}

/**
 * Save changes to a mailfish subscription or adds a new mailfish subscription.
 *
 * @param $subscription
 *  The subscription object to modify or add. If subscription->id is omitted,
 *  a new subscription will be added.
 */
 function mailfish_save($subscription) {
   global $user;

   //Allow presave field api work.
   field_attach_presave('mailfish', $subscription);

   //Allow modules to alter tge nailfish subscription before saving.
   module_invoke_all('entity_presave', $subscription, 'mailfish');

   if (empty($subscription->id)) {
     //Set default value.
     $defaults = array(
       'uid' => $user->id,
       'created' => REQUEST_TIME,
     );
     foreach ($defaults as $key => $default) {
       if (!isset($subscription->$key)) {
         $subscription->$key = $default;
       }
     }

     $status = drupal_write_record('mailfish', $subscription);
     field_attach_insert('mailfish', $subscription);
     module_invoke_all('entity_insert', $subscription, 'mailfish');
   }
   else {
     $status = drupal_write_record('mailfish', $subscription, 'id');
     field_attach_update('mailfish', $subscription);
     module_invoke_all('entity_update', $subscription, 'mailfish');
   }
   return $status;
 }


/**
 * Implements hook_ctools_plugin_directory().
 *
 * Tells CTools (and thus Panels) where to look for plugin code.
 */
function mailfish_ctools_plugin_directory($module, $plugin) {
  if (($module == 'ctools' || $module == 'panels') && ($plugin == 'content_types')) {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements ctools_plugin_api().
 */
function mailfish_ctools_plugin_api() {
  $args = func_get_args();
  $module = array_shift($args);
  $api = array_shift($args);
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}
